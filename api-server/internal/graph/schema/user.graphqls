type User implements Node {
  id: ID!
  login: String!
  name: String!
  surname: String!

  relation: UserRelation!

  friends(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder! = { direction: ASC, field: NAME }
  ): UserConnection!
}

enum UserRelation {
  STRANGER
  YOU
  FRIEND_REQUEST_SENT
  FRIEND
}

type UserEdge {
  node: User
  cursor: Cursor!
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

enum UserOrderField {
  NAME
  SURNAME
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField!
}

extend type Query {
  users(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    search: String
    orderBy: UserOrder! = { direction: ASC, field: NAME }
  ): UserConnection!
}
