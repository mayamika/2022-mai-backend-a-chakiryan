// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/mayamika/2022-mai-backend-a-chakiryan/api-server/internal/ent/friendrequest"
	"github.com/mayamika/2022-mai-backend-a-chakiryan/api-server/internal/ent/user"
)

// FriendRequest is the model entity for the FriendRequest schema.
type FriendRequest struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FriendRequestQuery when eager-loading is set.
	Edges               FriendRequestEdges `json:"edges"`
	friend_request_from *int
	friend_request_to   *int
}

// FriendRequestEdges holds the relations/edges for other nodes in the graph.
type FriendRequestEdges struct {
	// From holds the value of the from edge.
	From *User `json:"from,omitempty"`
	// To holds the value of the to edge.
	To *User `json:"to,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FromOrErr returns the From value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendRequestEdges) FromOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.From == nil {
			// The edge from was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.From, nil
	}
	return nil, &NotLoadedError{edge: "from"}
}

// ToOrErr returns the To value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FriendRequestEdges) ToOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.To == nil {
			// The edge to was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.To, nil
	}
	return nil, &NotLoadedError{edge: "to"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FriendRequest) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case friendrequest.FieldID:
			values[i] = new(sql.NullInt64)
		case friendrequest.ForeignKeys[0]: // friend_request_from
			values[i] = new(sql.NullInt64)
		case friendrequest.ForeignKeys[1]: // friend_request_to
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FriendRequest", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FriendRequest fields.
func (fr *FriendRequest) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case friendrequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fr.ID = int(value.Int64)
		case friendrequest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field friend_request_from", value)
			} else if value.Valid {
				fr.friend_request_from = new(int)
				*fr.friend_request_from = int(value.Int64)
			}
		case friendrequest.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field friend_request_to", value)
			} else if value.Valid {
				fr.friend_request_to = new(int)
				*fr.friend_request_to = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryFrom queries the "from" edge of the FriendRequest entity.
func (fr *FriendRequest) QueryFrom() *UserQuery {
	return (&FriendRequestClient{config: fr.config}).QueryFrom(fr)
}

// QueryTo queries the "to" edge of the FriendRequest entity.
func (fr *FriendRequest) QueryTo() *UserQuery {
	return (&FriendRequestClient{config: fr.config}).QueryTo(fr)
}

// Update returns a builder for updating this FriendRequest.
// Note that you need to call FriendRequest.Unwrap() before calling this method if this FriendRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (fr *FriendRequest) Update() *FriendRequestUpdateOne {
	return (&FriendRequestClient{config: fr.config}).UpdateOne(fr)
}

// Unwrap unwraps the FriendRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fr *FriendRequest) Unwrap() *FriendRequest {
	tx, ok := fr.config.driver.(*txDriver)
	if !ok {
		panic("ent: FriendRequest is not a transactional entity")
	}
	fr.config.driver = tx.drv
	return fr
}

// String implements the fmt.Stringer.
func (fr *FriendRequest) String() string {
	var builder strings.Builder
	builder.WriteString("FriendRequest(")
	builder.WriteString(fmt.Sprintf("id=%v", fr.ID))
	builder.WriteByte(')')
	return builder.String()
}

// FriendRequests is a parsable slice of FriendRequest.
type FriendRequests []*FriendRequest

func (fr FriendRequests) config(cfg config) {
	for _i := range fr {
		fr[_i].config = cfg
	}
}
