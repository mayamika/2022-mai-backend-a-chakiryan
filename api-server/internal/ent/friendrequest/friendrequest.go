// Code generated by entc, DO NOT EDIT.

package friendrequest

const (
	// Label holds the string label denoting the friendrequest type in the database.
	Label = "friend_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeFrom holds the string denoting the from edge name in mutations.
	EdgeFrom = "from"
	// EdgeTo holds the string denoting the to edge name in mutations.
	EdgeTo = "to"
	// Table holds the table name of the friendrequest in the database.
	Table = "friend_requests"
	// FromTable is the table that holds the from relation/edge.
	FromTable = "friend_requests"
	// FromInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FromInverseTable = "users"
	// FromColumn is the table column denoting the from relation/edge.
	FromColumn = "friend_request_from"
	// ToTable is the table that holds the to relation/edge.
	ToTable = "friend_requests"
	// ToInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ToInverseTable = "users"
	// ToColumn is the table column denoting the to relation/edge.
	ToColumn = "friend_request_to"
)

// Columns holds all SQL columns for friendrequest fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "friend_requests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"friend_request_from",
	"friend_request_to",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
